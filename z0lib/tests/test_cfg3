#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
# Based on template 2.1.1
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
READLINK=$(which readlink 2>/dev/null)
export READLINK
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
ME=$(readlink -e $0)
if [[ -d $HOME/devel || -z $HOME_DEVEL || ! -d $HOME_DEVEL ]]; then
  [[ -d $HOME/odoo/devel ]] && HOME_DEVEL="$HOME/odoo/devel" || HOME_DEVEL="$HOME/devel"
fi
PYPATH=""
[[ $(basename $PWD) == "tests" && $(basename $PWD/../..) == "build" ]] && PYPATH="$(dirname $PWD)"
[[ $(basename $PWD) == "tests" && $(basename $PWD/../..) == "build" && -d $PWD/../scripts ]] && PYPATH="$PYPATH $(readlink -f $PWD/../scripts)"
x=$ME; while [[ $x != $HOME && $x != "/" && ! -d $x/lib && ! -d $x/bin && ! -d $x/pypi ]]; do x=$(dirname $x); done
[[ -d $x/pypi ]] && PYPATH="$PYPATH $x/pypi"
[[ -d $x/pypi/z0lib ]] && PYPATH="$PYPATH $x/pypi/z0lib"
[[ -d $x/pypi/z0lib/z0lib ]] && PYPATH="$PYPATH $x/pypi/z0lib/z0lib"
[[ -d $x/tools ]] && PYPATH="$PYPATH $x/tools"
[[ -d $x/tools/z0lib ]] && PYPATH="$PYPATH $x/tools/z0lib"
[[ -d $x/bin ]] && PYPATH="$PYPATH $x/bin"
[[ -d $x/lib ]] && PYPATH="$PYPATH $x/lib"
[[ -d $HOME_DEVEL/venv/bin ]] && PYPATH="$PYPATH $HOME_DEVEL/venv/bin"
[[ -d $HOME_DEVEL/../tools ]] && PYPATH="$PYPATH $(readlink -f $HOME_DEVEL/../tools)"
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $TDIR $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
[[ -z "$Z0LIBDIR" ]] && echo "Library file z0librc not found in <$PYPATH>!" && exit 72
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
[[ -z "$Z0TLIBDIR" ]] && echo "Library file z0testrc not found!" && exit 72
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

# DIST_CONF=$(findpkg ".z0tools.conf" "$PYPATH")
# TCONF="$HOME/.z0tools.conf"
CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
CYAN="\e[1;36m"
GREEN="\e[1;32m"
CLR="\e[0m"

__version__=2.0.9


test_01() {
    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      if [ -f $FCONF.sample ]; then rm -f $FCONF.sample; fi
      link_cfg $FCONF
      CFG_set "param1" "Value1"
      CFG_set "param2" "Value2"
      CFG_set "param3" "Value3"
      CFG_set "param4" "Value4"
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      test_result "get_cfg_value '' param$i" "Value$i" "$TRES"
    done

    if [ ${opt_dry_run:-0} -eq 0 ]; then
      echo "param1= VALUE1 ">$FCONF
      echo "param3=VALUE3">>$FCONF
      link_cfg $FCONF
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      if [ $i -eq 1 ]; then
        test_result "get_cfg_value '' param$i" "VALUE$i" "$TRES"
      elif [ $i -eq 3 ]; then
        test_result "get_cfg_value '' param$i" "VALUE$i" "$TRES"
      else
        test_result "get_cfg_value '' param$i" "Value$i" "$TRES"
      fi
    done
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      echo "param4=\" VALUE4 \"">>$FCONF
      link_cfg $FCONF
    fi
    TRES=$(get_cfg_value "" "param4")
    test_result "get_cfg_value '' param4" " VALUE4 " "$TRES"

    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      echo "#param1=NOVALUE ">$FCONF.sample
      echo "param1= value1 ">>$FCONF.sample
      echo "param2=\"value2\"">>$FCONF.sample
      echo "param3=value3">>$FCONF.sample
      echo "param4= \"value4\" ">>$FCONF.sample
      link_cfg $FCONF
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      test_result "get_cfg_value '' param$i" "value$i" "$TRES"
    done
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      echo "param1= VALUE1 ">$FCONF
      echo "param3=VALUE3">>$FCONF
      link_cfg $FCONF
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      if [ $i -eq 1 ]; then
        test_result "get_cfg_value '' param$i" "VALUE$i" "$TRES"
      elif [ $i -eq 3 ]; then
        test_result "get_cfg_value '' param$i" "VALUE$i" "$TRES"
      else
        test_result "get_cfg_value '' param$i" "value$i" "$TRES"
      fi
    done

    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      CFG_set "param1" "defval1"
      CFG_set "param2" "defval2"
      CFG_set "param3" "defval3"
      CFG_set "param4" "defval4"
      echo "#param1=NOVALUE ">$FCONF.sample
      echo "param2=\"value2\"">>$FCONF.sample
      echo "param3=value3">>$FCONF.sample
      echo "param3= VALUE3 ">$FCONF
      echo "param4=None ">>$FCONF
      echo "param9=Long long \\">>$FCONF
      echo "       value \\">>$FCONF
      echo "       parameter">>$FCONF
      link_cfg $FCONF $FCONF.sample
    fi
    TRES=$(get_cfg_value "" "param1")
    test_result "get_cfg_value '' param1" "defval1" "$TRES"
    TRES=$(get_cfg_value "" "param2")
    test_result "get_cfg_value '' param2" "value2" "$TRES"
    TRES=$(get_cfg_value "" "param3")
    test_result "get_cfg_value '' param3" "VALUE3" "$TRES"
    TRES=$(get_cfg_value "" "param4")
    test_result "get_cfg_value '' param4" "" "$TRES"
    TRES=$(get_cfg_value "" "param9")
    test_result "get_cfg_value '' param9" "Long long value parameter" "$TRES"

    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      echo "#">$FCONF.sample
      echo "param1=Invalid">$FCONF
      local FH=$(xuname "-f")
      echo "[_${FH}_]">>$FCONF
      echo "param1=Right">>$FCONF
      if [ "$FH" == "RHEL" ]; then
        echo "[_Debian_]">>$FCONF
      else
        echo "[_RHEL_]">>$FCONF
      fi
      echo "param1=Wrong">>$FCONF
      link_cfg $FCONF
    fi
    TRES=$(get_cfg_value "" "param1")
    test_result "get_cfg_value '' param1 OS" "Right" "$TRES"
}


Z0BUG_init
parseoptest -l$TESTDIR/test_z0lib.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts
for p in z0librc odoorc travisrc zarrc z0testrc; do
  if [[ -f $RUNDIR/$p ]]; then
    [[ $p == "z0librc" ]] && Z0LIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "odoorc" ]] && ODOOLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "travisrc" ]] && TRAVISLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "zarrc" ]] && ZARLIB="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "z0testrc" ]] && Z0TLIBDIR="$RUNDIR" && source $RUNDIR/$p
  fi
done



UT1_LIST=
UT_LIST=
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts

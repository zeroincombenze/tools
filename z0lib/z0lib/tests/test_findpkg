#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 2.0.0
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
if [[ -z $HOME_DEVEL || ! -d $HOME_DEVEL ]]; then
  [[ -d $HOME/odoo/devel ]] && HOME_DEVEL="$HOME/odoo/devel" || HOME_DEVEL="$HOME/devel"
fi
[[ -x $TDIR/../bin/python3 ]] && PYTHON=$(readlink -f $TDIR/../bin/python3) || [[ -x $TDIR/python3 ]] && PYTHON="$TDIR/python3" || PYTHON=$(which python3 2>/dev/null) || PYTHON="python"
[[ -z $PYPATH ]] && PYPATH=$(echo -e "import os,sys\no=os.path\na=o.abspath\nj=o.join\nd=o.dirname\nb=o.basename\nf=o.isfile\np=o.isdir\nC=a('"$TDIR"')\nD='"$HOME_DEVEL"'\nif not p(D) and '/devel/' in C:\n D=C\n while b(D)!='devel':  D=d(D)\nN='venv_tools'\nU='setup.py'\nO='tools'\nH=o.expanduser('~')\nT=j(d(D),O)\nR=j(d(D),'pypi') if b(D)==N else j(D,'pypi')\nW=D if b(D)==N else j(D,'venv')\nS='site-packages'\nX='scripts'\ndef pt(P):\n P=a(P)\n if b(P) in (X,'tests','travis','_travis'):\n  P=d(P)\n if b(P)==b(d(P)) and f(j(P,'..',U)):\n  P=d(d(P))\n elif b(d(C))==O and f(j(P,U)):\n  P=d(P)\n return P\ndef ik(P):\n return P.startswith((H,D,K,W)) and p(P) and p(j(P,X)) and f(j(P,'__init__.py')) and f(j(P,'__main__.py'))\ndef ak(L,P):\n if P not in L:\n  L.append(P)\nL=[C]\nK=pt(C)\nfor B in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n for P in [C]+sys.path+os.environ['PATH'].split(':')+[W,R,T]:\n  P=pt(P)\n  if B==b(P) and ik(P):\n   ak(L,P)\n   break\n  elif ik(j(P,B,B)):\n   ak(L,j(P,B,B))\n   break\n  elif ik(j(P,B)):\n   ak(L,j(P,B))\n   break\n  elif ik(j(P,S,B)):\n   ak(L,j(P,S,B))\n   break\nak(L,os.getcwd())\nprint(' '.join(L))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
[[ -z "$Z0LIBDIR" ]] && echo "Library file z0librc not found in <$PYPATH>!" && exit 72
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
[[ -z "$Z0TLIBDIR" ]] && echo "Library file z0testrc not found!" && exit 72
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"

__version__=2.0.9


test_01() {
    local f p result TRES
    local f=$(basename $0)
    local p=$(dirname $0)
    local result=$(findpkg "$f" "$p")
    local TRES=$($READLINK -e $0)
    test_result "findpkg myself" "$TRES" "$result"
}

test_02() {
    local p p1 p2 Y1 Y2 result TRES
    p=$(dirname $0)
    p=$($READLINK -e $p)
    Y1=pgsql
    Y2=postgresql
    mkdir -p $p/$Y1
    mkdir -p $p/$Y2
    mkdir -p $p/$Y2/9.1
    touch $p/$Y2/psql
    touch $p/$Y2/9.1/psql9

    result=$(findpkg "" "$p" "$Y1")
    TRES=$($READLINK -e $p/$Y1)
    test_result "findpkg '' $p $Y1" "$TRES" "$result"

    result=$(findpkg "" "$p" "$Y2")
    TRES=$($READLINK -e $p/$Y2)
    test_result "findpkg '' $p $Y2" "$TRES" "$result"

    result=$(findpkg "" "$p" "$Y2 $Y1" "9.1")
    TRES=$($READLINK -e $p/$Y2/9.1)
    test_result "findpkg '' $p '$Y2 $Y1' 9.1" "$TRES" "$result"

    result=$(findpkg "psql" "$p" "$Y1 $Y2" "9.1")
    TRES=$($READLINK -e $p/$Y2/psql)
    test_result "findpkg psql $p '$Y2 $Y1' 9.1" "$TRES" "$result"

    result=$(findpkg "psql9" "$p" "$Y1 $Y2" "9.1")
    TRES=$($READLINK -e $p/$Y2/9.1/psql9)
    test_result "findpkg psql9 $p '$Y2 $Y1' 9.1" "$TRES" "$result"

    p1=$(basename $p)
    p=$(dirname $p)
    result=$(findpkg "psql9" "$p" "$p1" "$Y1 $Y2" "9.1")
    test_result "findpkg psql9 $p $p1 '$Y2 $Y1' 9.1" "$TRES" "$result"

    p2=$(basename $p)
    p=$(dirname $p)
    result=$(findpkg "psql9" "$p" "$p2" "$p1" "$Y1 $Y2" "9.1")
    test_result "findpkg psql9 $p $p2 $p1 '$Y2 $Y1' 9.1" "$TRES" "$result"

    result=$(findpkg "" "$p" "$p2" "$p1" "$Y1 $Y2" "9.2")
    # TRES=$($READLINK -e $p/$p2/$p1/$Y1)
    test_result "findpkg '' $p $p2 $p1 '$Y2 $Y1' 9.2" "" "$result"
}

test_03() {
    local f p result TRES
    f=""
    p="/etc /usr"
    result=$(findpkg "$f" "$p")
    TRES="/etc"
    test_result "findpkg $f $p" "$TRES" "$result"
}

test_04() {
    local f p result TRES
    f=""
    p="./Non_Exists /etc /usr"
    result=$(findpkg "$f" "$p")
    TRES="/etc"
    test_result "findpkg $f $p" "$TRES" "$result"
}

test_05() {
    local f p result TRES
    f="bash"
    p="./Non_Exists /etc /bin"
    result=$(findpkg "$f" "$p")
    if [ -s /bin ]; then
      TRES=$($READLINK -e /bin)/bash
    else
      TRES="/bin/bash"
    fi
    test_result "findpkg $f $p" "$TRES" "$result"
}

test_06() {
    local f p s result TRES
    p="/usr /etc /bin"
    s="init hosts init.d"
    if [ -h /etc/init.d ]; then
      TRES=$($READLINK -e /etc/init.d)
    else
      TRES=/etc/init.d
    fi
    if [ -f $TRES/network ]; then
      TRES=$TRES/network
      f="network"
      result=$(findpkg "$f" "$p" "$s")
    elif [ -f $TRES/networking ]; then
      TRES=$TRES/networking
      f="networking"
      result=$(findpkg "$f" "$p" "$s")
    else
      f=failed
      result=$(findpkg "$f" "$p" "$s")
    fi
    [ "$f" == "failed" ] || test_result "findpkg $f $p $s" "$TRES" "$result"
}

test_07() {
    local f p s result TRES
    f="mail/"
    p="/var  /usr /etc /bin"
    s="spool mail log lib"
    result=$(findpkg "$f" "$p" "$s")
    if [ -h  /var/spool/mail ]; then
      TRES=$($READLINK -e /var/spool/mail)
    else
      TRES=/var/spool/mail
    fi
    test_result "findpkg $f $p $s" "$TRES" "$result"
}

test_09() {
    local p p1 p2 Y1 Y2 result TRES
    p=$(dirname $0)
    p=$($READLINK -e $p)
    Y1=pgsql
    Y2=postgresql
    rm -fR $p/$Y1
    rm -fR $p/$Y2
}

Z0BUG_init
parseoptest -l$TESTDIR/test_z0lib.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts
for p in z0librc odoorc travisrc zarrc z0testrc; do
  if [[ -f $RUNDIR/$p ]]; then
    [[ $p == "z0librc" ]] && Z0LIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "odoorc" ]] && ODOOLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "travisrc" ]] && TRAVISLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "zarrc" ]] && ZARLIB="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "z0testrc" ]] && Z0TLIBDIR="$RUNDIR" && source $RUNDIR/$p
  fi
done




UT1_LIST=
UT_LIST=
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts



#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 2.0.0
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
if [[ -z $HOME_DEVEL || ! -d $HOME_DEVEL ]]; then
  [[ -d $HOME/odoo/devel ]] && HOME_DEVEL="$HOME/odoo/devel" || HOME_DEVEL="$HOME/devel"
fi
[[ -x $TDIR/../bin/python3 ]] && PYTHON=$(readlink -f $TDIR/../bin/python3) || [[ -x $TDIR/python3 ]] && PYTHON="$TDIR/python3" || PYTHON=$(which python3 2>/dev/null) || PYTHON="python"
[[ -z $PYPATH ]] && PYPATH=$(echo -e "import os,sys\no=os.path\na=o.abspath\nj=o.join\nd=o.dirname\nb=o.basename\nf=o.isfile\np=o.isdir\nC=a('"$TDIR"')\nD='"$HOME_DEVEL"'\nif not p(D) and '/devel/' in C:\n D=C\n while b(D)!='devel':  D=d(D)\nN='venv_tools'\nU='setup.py'\nO='tools'\nH=o.expanduser('~')\nT=j(d(D),O)\nR=j(d(D),'pypi') if b(D)==N else j(D,'pypi')\nW=D if b(D)==N else j(D,'venv')\nS='site-packages'\nX='scripts'\ndef pt(P):\n P=a(P)\n if b(P) in (X,'tests','travis','_travis'):\n  P=d(P)\n if b(P)==b(d(P)) and f(j(P,'..',U)):\n  P=d(d(P))\n elif b(d(C))==O and f(j(P,U)):\n  P=d(P)\n return P\ndef ik(P):\n return P.startswith((H,D,K,W)) and p(P) and p(j(P,X)) and f(j(P,'__init__.py')) and f(j(P,'__main__.py'))\ndef ak(L,P):\n if P not in L:\n  L.append(P)\nL=[C]\nK=pt(C)\nfor B in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n for P in [C]+sys.path+os.environ['PATH'].split(':')+[W,R,T]:\n  P=pt(P)\n  if B==b(P) and ik(P):\n   ak(L,P)\n   break\n  elif ik(j(P,B,B)):\n   ak(L,j(P,B,B))\n   break\n  elif ik(j(P,B)):\n   ak(L,j(P,B))\n   break\n  elif ik(j(P,S,B)):\n   ak(L,j(P,S,B))\n   break\nak(L,os.getcwd())\nprint(' '.join(L))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
[[ -z "$Z0LIBDIR" ]] && echo "Library file z0librc not found in <$PYPATH>!" && exit 72
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
[[ -z "$Z0TLIBDIR" ]] && echo "Library file z0testrc not found!" && exit 72
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"

__version__=2.0.9


test_01() {
    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      [[ -f $FCONF ]] && rm -f $FCONF
      [[ -f $FCONF.sample ]] && rm -f $FCONF.sample
      link_cfg $FCONF
      CFG_set "param0" "1;2;3"
      CFG_set "param1" "Value1"
      CFG_set "param2" "Value2"
      CFG_set "param3" "Value3"
      CFG_set "param4" "Value4"
    fi
    export XPRM0=$(get_cfg_value "" "param$i")
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      test_result "get_cfg_value '' param$i" "$TRES" "Value$i"
    done

    if [ ${opt_dry_run:-0} -eq 0 ]; then
      echo "param1= VALUE1 ">$FCONF
      echo "param3=VALUE3">>$FCONF
      link_cfg $FCONF
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      if [ $i -eq 1 ]; then
        test_result "get_cfg_value '' param$i" "$TRES" "VALUE$i"
      elif [ $i -eq 3 ]; then
        test_result "get_cfg_value '' param$i" "$TRES" "VALUE$i"
      else
        test_result "get_cfg_value '' param$i" "$TRES" "Value$i"
      fi
    done
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      echo "param4=\" VALUE4 \"">>$FCONF
      link_cfg $FCONF
    fi
    TRES=$(get_cfg_value "" "param4")
    test_result "get_cfg_value '' param4" "$TRES" " VALUE4 "

    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      echo "#param1=NOVALUE ">$FCONF.sample
      echo "param1= value1 ">>$FCONF.sample
      echo "param2=\"value2\"">>$FCONF.sample
      echo "param3=value3">>$FCONF.sample
      echo "param4= \"value4\" ">>$FCONF.sample
      link_cfg $FCONF
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      test_result "get_cfg_value '' param$i" "$TRES" "value$i"
    done
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      echo "param1= VALUE1 ">$FCONF
      echo "param3=VALUE3">>$FCONF
      link_cfg $FCONF
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      if [ $i -eq 1 ]; then
        test_result "get_cfg_value '' param$i  #upd" "$TRES" "VALUE$i"
      elif [ $i -eq 3 ]; then
        test_result "get_cfg_value '' param$i  #upd" "$TRES" "VALUE$i"
      else
        test_result "get_cfg_value '' param$i" "$TRES" "value$i"
      fi
    done

    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      CFG_set "param1" "defval1"
      CFG_set "param2" "defval2"
      CFG_set "param3" "defval3"
      CFG_set "param4" "defval4"
      echo "#param1=NOVALUE ">$FCONF.sample
      echo "param2=\"value2\"">>$FCONF.sample
      echo "param3=value3">>$FCONF.sample
      echo "param3= VALUE3 ">$FCONF
      echo "param4=None ">>$FCONF
      echo "param9=Long long \\">>$FCONF
      echo "       value \\">>$FCONF
      echo "       parameter">>$FCONF
      link_cfg $FCONF $FCONF.sample
    fi
    TRES=$(get_cfg_value "" "param1")
    test_result "get_cfg_value '' param1  #default" "$TRES" "defval1"
    TRES=$(get_cfg_value "" "param2")
    test_result "get_cfg_value '' param2" "$TRES" "value2"
    TRES=$(get_cfg_value "" "param3")
    test_result "get_cfg_value '' param3" "$TRES" "VALUE3"
    TRES=$(get_cfg_value "" "param4")
    test_result "get_cfg_value '' param4" "$TRES" ""
    TRES=$(get_cfg_value "" "param9")
    test_result "get_cfg_value '' param9" "$TRES" "Long long value parameter"

    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      echo "#">$FCONF.sample
      echo "param1=Invalid">$FCONF
      local FH=$(xuname "-f")
      echo "[_${FH}_]">>$FCONF
      echo "param1=Right">>$FCONF
      if [ "$FH" == "RHEL" ]; then
        echo "[_Debian_]">>$FCONF
      else
        echo "[_RHEL_]">>$FCONF
      fi
      echo "param1=Wrong">>$FCONF
      link_cfg $FCONF
    fi
    TRES=$(get_cfg_value "" "param1")
    test_result "get_cfg_value '' param1 #[$FH]" "$TRES" "Right"
}


Z0BUG_init
parseoptest -l$TESTDIR/test_z0lib.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts
for p in z0librc odoorc travisrc zarrc z0testrc; do
  if [[ -f $RUNDIR/$p ]]; then
    [[ $p == "z0librc" ]] && Z0LIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "odoorc" ]] && ODOOLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "travisrc" ]] && TRAVISLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "zarrc" ]] && ZARLIB="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "z0testrc" ]] && Z0TLIBDIR="$RUNDIR" && source $RUNDIR/$p
  fi
done


UT1_LIST=
UT_LIST=
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts



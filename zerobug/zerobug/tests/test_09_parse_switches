#! /bin/bash
# Copyright (C) 2015-2025 SHS-AV s.r.l. (<http://www.zeroincombenze.org>)
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 2.0.0
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
if [[ -z $HOME_DEVEL || ! -d $HOME_DEVEL ]]; then
  [[ -d $HOME/odoo/devel ]] && HOME_DEVEL="$HOME/odoo/devel" || HOME_DEVEL="$HOME/devel"
fi
[[ -x $TDIR/../bin/python3 ]] && PYTHON=$(readlink -f $TDIR/../bin/python3) || [[ -x $TDIR/python3 ]] && PYTHON="$TDIR/python3" || PYTHON=$(which python3 2>/dev/null) || PYTHON="python"
[[ -z $PYPATH ]] && PYPATH=$(echo -e "import os,sys\no=os.path\na=o.abspath\nj=o.join\nd=o.dirname\nb=o.basename\nf=o.isfile\np=o.isdir\nC=a('"$TDIR"')\nD='"$HOME_DEVEL"'\nif not p(D) and '/devel/' in C:\n D=C\n while b(D)!='devel':  D=d(D)\nN='venv_tools'\nU='setup.py'\nO='tools'\nH=o.expanduser('~')\nT=j(d(D),O)\nR=j(d(D),'pypi') if b(D)==N else j(D,'pypi')\nW=D if b(D)==N else j(D,'venv')\nS='site-packages'\nX='scripts'\ndef pt(P):\n P=a(P)\n if b(P) in (X,'tests','travis','_travis'):\n  P=d(P)\n if b(P)==b(d(P)) and f(j(P,'..',U)):\n  P=d(d(P))\n elif b(d(C))==O and f(j(P,U)):\n  P=d(P)\n return P\ndef ik(P):\n return P.startswith((H,D,K,W)) and p(P) and p(j(P,X)) and f(j(P,'__init__.py')) and f(j(P,'__main__.py'))\ndef ak(L,P):\n if P not in L:\n  L.append(P)\nL=[C]\nK=pt(C)\nfor B in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n for P in [C]+sys.path+os.environ['PATH'].split(':')+[W,R,T]:\n  P=pt(P)\n  if B==b(P) and ik(P):\n   ak(L,P)\n   break\n  elif ik(j(P,B,B)):\n   ak(L,j(P,B,B))\n   break\n  elif ik(j(P,B)):\n   ak(L,j(P,B))\n   break\n  elif ik(j(P,S,B)):\n   ak(L,j(P,S,B))\n   break\nak(L,os.getcwd())\nprint(' '.join(L))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
[[ -z "$Z0LIBDIR" ]] && echo "Library file z0librc not found in <$PYPATH>!" && exit 72
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
[[ -z "$Z0TLIBDIR" ]] && echo "Library file z0testrc not found!" && exit 72
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"

__version__=2.0.18


test_01() {
    local sts res res1 res2 res3 res4 res5 res6 res7 res8 res9 res10 res11 x
    [ ${opt_dry_run:-0} -eq 0 ] && dbgmsg ".test_01 - min=$min_test, max=$max_test, ctr=$ctr"
    Z0BUG_run_autotest=1
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      TEST_opts="-n"
      parseoptest $TEST_opts
      ready_opts
      res1=$opt_dry_run
      res2=$LECHO
      res3=$opt_echo
      res4=$opt_new
      res5=$logfn
      res6=$ctr
      res7=$min_test
      res8=$max_test
      res9=$opt_noctr
      res10=$opt_debug
      res11=$run_on_top
      restore_env
    else
      ctr=0
    fi
    test_result "Opt -n" "$res1" "1"
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      if [[ -t 0 || -p /dev/stdin ]]; then
        res=echo
      else
        res=
      fi
      test_result "Opt -n (tty)" "$res2" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [[ -t 0 || -p /dev/stdin ]]; then
        res=1
      else
        res=0
      fi
      test_result "Opt -n (-e)" "$res3" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -n (-k)" "$res4" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      x=$TESTDIR/${module_id}_test.log
      res=$($READLINK -m $x)
      test_result "Opt -n (-k)" "$res5" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -n (-s)" "$res7" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -n (-z)" "$res8" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ -n "$COVERAGE_PROCESS_START" ]; then
        res=1
      else
        res=0
      fi
      test_result "Opt -n (-0)"x "$res9" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -b" "$res10" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=1
      test_result "Run on top" "$res11" "$res"
      sts=$?
    fi
    return $sts
}

test_03() {
    local sts res res1 res2 res3 res4 res5 res6 res7 res8 res9 res10 res11
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      dbgmsg ".test_03 - min=$min_test, max=$max_test, ctr=$ctr"
    fi
    Z0BUG_run_autotest=1
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      res10=$HOME/dev/z0testlib.log
      TEST_opts="-n -l$res10"
      parseoptest $TEST_opts
      res1=$opt_dry_run
      res4=$opt_new
      res5=$logfn
      restore_env
    else
      ctr=0
    fi
    test_result "Opt -n" "$res1" "1"
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -n (-k)" "$res4" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=$res10
      test_result "Opt -n (-k)" "$res5" "$res"
      sts=$?
    fi
    return $sts
}

test_06() {
    local sts res res1 res2 res3 res4 res5 res6 res7 res8 res9 res10 res11
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      dbgmsg ".test_06 - min=$min_test, max=$max_test, ctr=$ctr"
    fi
    Z0BUG_run_autotest=1
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      TEST_opts="-s0"
      parseoptest $TEST_opts
      res7=$min_test
      res11=$run_on_top
      restore_env
    else
      ctr=0
    fi
    res=0
    test_result "Opt -n (-s)" "$res7" "$res"
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Run on top" "$res11" "$res"
      sts=$?
    fi
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      TEST_opts="-s 13"
      parseoptest $TEST_opts
      res7=$min_test
      restore_env
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=13
      test_result "Opt -s 13" "$res7" "$res"
      sts=$?
    fi
    return $sts
}

test_07() {
    local sts res res1 res2 res3 res4 res5 res6 res7 res8 res9 res10
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      dbgmsg ".test_06 - min=$min_test, max=$max_test, ctr=$ctr"
    fi
    Z0BUG_run_autotest=1
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      TEST_opts="-s0 -z13"
      parseoptest $TEST_opts
      res7=$min_test
      res8=$max_test
      restore_env
    else
      ctr=0
    fi
    res=0
    test_result "Opt -s0" "$res7" "$res"
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      res=13
      test_result "Opt -z13" "$res8" "$res"
      sts=$?
    fi
    return $sts
}


Z0BUG_init
parseoptest -l$TESTDIR/test_zerobug.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts
for p in z0librc odoorc travisrc zarrc z0testrc; do
  if [[ -f $RUNDIR/$p ]]; then
    [[ $p == "z0librc" ]] && Z0LIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "odoorc" ]] && ODOOLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "travisrc" ]] && TRAVISLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "zarrc" ]] && ZARLIB="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "z0testrc" ]] && Z0TLIBDIR="$RUNDIR" && source $RUNDIR/$p
  fi
done


UT1_LIST=""
UT_LIST=""
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts







xtl_id=odoo
xtl_Id=Odoo
xtl_name=${xtl_id}
xtl_pidfile=/var/run/${xtl_id}/${xtl_name}.pid
xtl_logfile=/var/log/${xtl_id}/${xtl_name}.log
xtl_cfgfile=/etc/${xtl_id}/${xtl_name}.conf
xtl_altcfgfile=/etc/${xtl_name}.conf
xtl_version=18
xtl_fversion=18.0
xtl_user=odoo
xtl_test=0
xtl_sudo=0
#!/bin/bash
# ${xtl_name}           This shell script takes care of starting and stopping
#                       ${xtl_Id} server ${xtl_fversion}
#
# chkconfig: 345 95 05
# description: ${xtl_Id} server
#
# pidfile: ${xtl_pidfile}
# config: /etc/${xtl_name}.conf

### BEGIN INIT INFO
# Provides:             ${xtl_name}
# Required-Start:       postgresql
# Required-Stop:        postgresql
# Should-Start:         $network
# Should-Stop:          $network
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Complete Business Application software
# Description:          Odoo is a complete suite of business tools.
### END INIT INFO
# version: 2.0.8 (Debian)
# Warning: this is a customized ${xtl_Id} script, running Linux
# It was tested on: CentOS (6 & 7), Ubuntu (12 & 14 & 16 & 18 & 20), Debian (7 & 8 & 9)
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2025 by zeroincombenzeÂ® <http://wiki.zeroincombenze.it>
# This free software is released under GNU Affero GPL3
# Update follow line to enable dry_run rather actual executable script
DRY_RUN=${xtl_test}
# Use sudo to execute command instead of start-stop-daemon (only Debian)
USE_SUDO=${xtl_sudo}
# Run debug mode
RUN_DEBUG=0
# Recognize Linux distribution (Debian/Ubuntu or RHEL/CentOS/Fedora)
OS=$(uname -s)
FH=""
if [[ "${OS}" == "Linux" ]]; then
  if [[ -f /etc/centos-release || -f /etc/redhat-release || -f /etc/fedora-release || -f /etc/SUSE-release || -f /etc/mandriva-release ]]; then
    FH="RHEL"
  elif [[ -f /etc/lsb-release || -d /etc/lsb-release.d || -f /etc/debian_version || -f /etc/os-release ]]; then
    FH="Debian"
  fi
fi
# Source function library (Only RHEL)
if [[ "$FH" == "RHEL" ]]; then
    if [[ -f /etc/init.d/functions ]]; then
        . /etc/init.d/functions
    elif [[ -f /etc/rc.d/init.d/functions ]]; then
        . /etc/rc.d/init.d/functions
    else
        exit 1
    fi
fi
# Set path (Only Debian)
if [[ "$FH" == "Debian" ]]; then
    PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
    if [[ -f /lib/lsb/init-functions ]]; then
        . /lib/lsb/init-functions
    else
        exit 1
    fi
fi
[[ -f /etc/profile.d/custom.sh ]] && . /etc/profile.d/custom.sh
[[ -f /etc/profile.d/odoo.sh ]] && . /etc/profile.d/odoo.sh
[[ $RUN_DEBUG -ne 0 ]] && DRY_RUN=1
# Specify the user name (Default: odoo).
USER_RUN=${xtl_user}
USERHOME=$(eval echo ~$USER_RUN)
# Specify config file (Default: ${xtl_cfgfile}).
if [[ -f ${xtl_cfgfile} ]]; then
  CONFIGFILE="${xtl_cfgfile}"
elif [[ -f ${xtl_altcfgfile} ]]; then
  CONFIGFILE="${xtl_altcfgfile}"
else
  CONFIGFILE=""
fi
# search for execution command script
xtl_org=$(echo $(basename $0)|grep --color=never -Eo "(oca|librerp|zero|powerp)"|tail -n1)
[[ -z "$xtl_org" ]] && ORG="odoo" || ORG="$xtl_org"
mult=$(echo $(basename $0)|grep --color=never -Eo "(6|7|8|9|10|11|12|13|14|15|16|17|18)")
[[ $DRY_RUN -gt 0 ]] && echo "Odoo ver=${xtl_fversion}" && echo "mult=${mult}" && echo "ORG=$ORG"
DAEMON=""
VENV_DIR=""

if [[ -z "$DAEMON" ]]; then
  if [[ -n "$CONFIGFILE" ]]; then
    [[ $DRY_RUN -gt 0 ]] && echo "CONFIGFILE=$CONFIGFILE"
    LL=""
    dr="$(grep ^addons_path $CONFIGFILE | awk -F= '{gsub(/^ */,"",$2); print $2}')"
    for fn in ${dr//,/ }; do
      [[ $fn =~ /addons ]] && LL="$LL $(dirname $fn)"
      [[ $fn =~ /server/ ]] && LL="$LL $(dirname $(dirname $fn))"
    done
    if [[ -n "$LL" ]]; then
      [[ $DRY_RUN -gt 0 ]] && echo "find $LL -maxdepth 1 -type f -executable -name odoo-bin -o -name openerp-server"
      for fn in $(find $LL -maxdepth 1 -type f -executable -name odoo-bin -o -name openerp-server); do
        [[ $DRY_RUN -gt 0 ]] && echo "> for $fn in $LL"
        mime=$(file --mime-type -b $fn)
        [[ $mime =~ text/.*python ]] && DAEMON=$fn && break
      done
    fi
  fi
fi
[[ $DRY_RUN -gt 0 ]] && echo "DAEMON=$DAEMON"
[[ -z "$DAEMON" ]] && echo "Odoo executable not found!" && exit 2
p=$(dirname ${DAEMON})
[[ "$(basename $p)" == "server" ]] && p=$(dirname $p)
[[ -d "$p" && "$(basename $p)" == "odoo" ]] && p=$(dirname $p)
if [[ -f $p/bin/activate ]]; then
  VENV_DIR=$p
else
  for dn in venv_odoo venv; do
    [[ -f $p/$dn/bin/activate ]] && VENV_DIR=$p/$dn && break
  done
fi
if [[ -z "$VENV_DIR" ]]; then
  [[ $dr =~ /server/ ]] && dr=$(readlink -f $(dirname $DAEMON)/../..) || dr=$(readlink -f $(dirname $DAEMON)/..)
  [[ $DRY_RUN -gt 0 ]] && echo "find $dr -maxdepth 1 -type d -name \"VENV*${ORG}*${mult}*\"|head -n1"
  VENV_DIR=$(find $dr -maxdepth 1 -type d -name "VENV*${ORG}*${mult}*"|head -n1)
  [[ -z "$VENV_DIR" && $DRY_RUN -gt 0 ]] && echo "find $dr -maxdepth 1 -type d -name \"VENV-${mult}*\"|head -n1"
  [[ -z "$VENV_DIR" ]] && VENV_DIR=$(find $dr -maxdepth 1 -type d -name "VENV-${mult}*"|head -n1)
fi
[[ $DRY_RUN -gt 0 ]] && echo "VENV_DIR=$VENV_DIR"
NAME=${xtl_name}
DESC="${xtl_Id} Server Daemon ($NAME)"
# pidfile
PIDFILE="$(grep -E ^pidfile $CONFIGFILE | awk -F= '{gsub(/^ */,"",$2); print $2}')"
LOCKFILE=/var/lock/subsys/${NAME}
LOGFILE="$(grep -E ^logfile $CONFIGFILE | awk -F= '{gsub(/^ */,"",$2); print $2}')"
# Additional options that are passed to the Daemon.
if [[ "$FH" == "Debian" ]]; then
  DAEMON_OPTS="--logfile=$LOGFILE"
else
  DAEMON_OPTS="--pidfile=$PIDFILE --logfile=$LOGFILE"
fi
# check if the ${NAME} conf file is present, then use it
[[ -f $CONFIGFILE ]] && DAEMON_OPTS="-c $CONFIGFILE $DAEMON_OPTS"
DAEMON_OPTS="$DAEMON_OPTS $2 $3 $4 $5 $6 $7 $8 $9"
[[ -x $DAEMON ]] || exit 0
RETVAL=0


log_mesg() {
    [[ $DRY_RUN -gt 0 ]] && echo $1
    [[ $DRY_RUN -eq 0 ]] && echo $1>>$LOGFILE
}


set_queue() {
    local dt p
    if [[ -f $CONFIGFILE ]]; then
      modules=$(grep ^server_wide_modules $CONFIGFILE|awk -F= '{print $2}')
      if [[ $modules =~ queue_job ]]; then
        ch=$(grep ^channels $CONFIGFILE|awk -F= '{print $2}'|tr -d ' ')
        [[ -z $ch ]] && ch="root:1"
        dt=$(date +"%Y-%m-%d %H:%M:%S,000")
        log_mesg "$dt $$ DAEMON ? $0: export ODOO_CONNECTOR_CHANNELS=\"$ch\""
        export ODOO_CONNECTOR_CHANNELS="$ch"
      fi
    fi
}


set_lessc() {
    local dt p
    local f=$1
    local minv=$2
    [[ -z "$minv" ]] && minv=30000
    local lv=$($f --version 2>/dev/null|grep --color=never -Eo "[0-9.]+"|head -n1|awk -F. '{print $1*10000 + $2*100 + $3}')
    [[ -z "$lv" ]] && lv=0
    dt=$(date +"%Y-%m-%d %H:%M:%S,000")
    if [[ $lv -ge $minv ]]; then
      if [[ $EUID -eq 0 ]]; then
        [[ -x /usr/bin/lessc ]] && rm -f /usr/bin/lessc
        log_mesg "$dt $$ DAEMON ? $0: ln -s $f /usr/bin"
        ln -s $f /usr/bin
      else
        p=$(dirname $f)
        log_mesg "$dt $$ DAEMON ? $0: export PATH=$p:$PATH"
        export PATH=$p:$PATH
      fi
    fi
}


check_lessc() {
    local d dt f x
    local lv=$(lessc --version 2>/dev/null|grep --color=never -Eo "[0-9.]+"|head -n1|awk -F. '{print $1*10000 + $2*100 + $3}')
    local alt_less=
    [[ -z "$lv" ]] && lv=0
    dt=$(date +"%Y-%m-%d %H:%M:%S,000")
    if [[ $lv -lt 30000 ]]; then
      log_mesg "$dt $$ DAEMON ? $0: lessc --version: $(lessc --version 2>/dev/null)"
      log_mesg "$dt $$ DAEMON ? $0: Searching for lessc ..."
      for d in $HOME/.npm-global $HOME/node_modules /usr/lib/node_modules; do
        if [[ -d $d ]]; then
          if [[ -x $d/less/bin/lessc ]]; then
            f=$d/less/bin/lessc
            lv=$($f --version 2>/dev/null|grep --color=never -Eo "[0-9.]+"|head -n1|awk -F. '{print $1*10000 + $2*100 + $3}')
            [[ -z "$lv" ]] && lv=0
            if [[ $lv -gt 30000 ]]; then
              set_lessc $f 30000
              break
            elif [[ $lv -gt 20000 ]]; then
              alt_less=$f
            fi
          fi
        fi
      done
    fi
    lv=$(lessc --version 2>/dev/null|grep --color=never -Eo "[0-9.]+"|head -n1|awk -F. '{print $1*10000 + $2*100 + $3}')
    [[ -z "$lv" ]] && lv=0
    if [[ $lv -lt 20000 && -n "$alt_less" ]]; then
      set_lessc $alt_less 20000
    elif [[ $lv -gt 0 ]]; then
      local dt=$(date +"%Y-%m-%d %H:%M:%S,000")
      log_mesg "$dt $$ DAEMON ? $0: $(which lessc) --version: $(lessc --version 2>/dev/null)"
    else
      local dt=$(date +"%Y-%m-%d %H:%M:%S,000")
      log_mesg "$dt $$ DAEMON-ERROR ? $0: Command lessc not found!"
    fi
}


checkpid() {
    local pid=$1
    [[ -z $pid && -s $PIDFILE ]] && pid=$(cat $PIDFILE)
    [[ -n $pid && -d /proc/$pid ]] && return 0
    return 1
}


check_4_venv() {
    local dt x
    x=$(which wsl.exe 2>/dev/null)
    [[ -n $x && $(ps -ef|grep -Evq "^postgres.* /.*/postgresql") ]] && sleep 8
    dt=$(date +"%Y-%m-%d %H:%M:%S,000")
    if [[ -n "$VENV_DIR" && -f $VENV_DIR/bin/activate ]]; then
        log_mesg "$dt $$ DAEMON ? $0: cd $VENV_DIR; source ./bin/activate"
        # [[ $DRY_RUN -gt 0 ]] && echo "cd $VENV_DIR" && echo "source ./bin/activate"
        cd $VENV_DIR
        source ./bin/activate
        [[ ${xtl_version} -lt 11 ]] && log_mesg "$dt $$ DAEMON ? $0: $(which python|tr -d "\n") $(python --version 2>&1|tr -d "\n")"
        [[ ${xtl_version} -ge 11 ]] && log_mesg "$dt $$ DAEMON ? $0: $(which python3|tr -d "\n") $(python3 --version 2>&1|tr -d "\n")"
        [[ $(uname -r) =~ ^3 && $(head -n1 $DAEMON|grep -E "^#\!.*env python") ]] && sed -E "s|^#\!.*env python|^#\!$VENV_DIR/bin/python|" -i $DAEMON && log_mesg "$dt $$ DAEMON ? $0: $DAEMON[0]=\"#\!$VENV_DIR/bin/python\""
    else
        VENV_DIR=""
        log_mesg "$dt $$ DAEMON ? $0: No virtual environment found for ${DAEMON}!"
    fi
}


check_privsep_dir() {
    # Create the PrivSep empty dir if necessary
    local d dt f p ur ugr uu x xx
    local grp=$(id -g ${USER_RUN})
    dt=$(date +"%Y-%m-%d %H:%M:%S,000")
    [[ -n "$HOSTNAME_DEV" && $HOSTNAME =~ $HOSTNAME_DEV ]] && log_mesg "$dt $$ DAEMON ? $0: Development Environment"
    [[ -z "$HOSTNAME_DEV" || ! $HOSTNAME =~ $HOSTNAME_DEV ]] && log_mesg "$dt $$ DAEMON ? $0: Production Environment"
    for f in $LOGFILE $PIDFILE; do
        ur=${USER_RUN}
        ugr=${USER_RUN}:${grp}
        [[ -n "$HOSTNAME_DEV" && $HOSTNAME =~ $HOSTNAME_DEV ]] && p=0775 || p=0755
        d=$(dirname $f)
        [[ ! -d $d ]] && log_mesg "$dt $$ DAEMON ? $0: mkdir $d" && mkdir $d
        uu=$(stat -c %U $d)
        if [[ ${uu} != ${ur} ]]; then
            log_mesg "$dt $$ DAEMON ? $0: Invalid path $d owner $uu: expected ${ur}!"
            log_mesg "$dt $$ DAEMON ? $0: chown ${ugr} $d" && chown ${ugr} $d
        fi
        xx="0$(stat -c %a $d)"
        if [[ ${xx} != ${p} ]]; then
            log_mesg "$dt $$ DAEMON ? $0: Invalid path $d protection $xx: expected ${p}!"
            log_mesg "$dt $$ DAEMON ? $0: chmod ${p} $d" && chmod ${p} $d
        fi
        [[ ! -f $f ]] && touch $f && chown ${ugr} $f
        [[ ! -f $f ]] && continue
        uu=$(stat -c %U $f)
        [[ -n "$HOSTNAME_DEV" && $HOSTNAME =~ $HOSTNAME_DEV ]] && p=0664 || p=0644
        if [[ ${uu} != ${ur} ]]; then
            [[ "$uu" != "${USER_RUN}" ]] && log_mesg "$x $$ DAEMON ? $0: Invalid file $f owner $uu: expected ${ur}!"
            log_mesg "$dt $$ DAEMON ? $0: chown ${ugr} $f" && chown ${ugr} $f
        fi
        xx="0$(stat -c %a $f)"
        if [[ ${xx} != ${p} ]]; then
            log_mesg "$dt $$ DAEMON ? $0: Invalid file $f protection $xx: expected ${p}!"
            log_mesg "$dt $$ DAEMON ? $0: chmod ${p} $f" && chmod ${p} $f
        fi
    done
}


set_publicsep_dir() {
    # Create the PrivSep empty dir if necessary
    local d dt f ur ugr uu x
    local grp=$(id -g ${USER_RUN})
    dt=$(date +"%Y-%m-%d %H:%M:%S,000")
    ur=${USER_RUN}
    ugr=${USER_RUN}:${grp}
    for f in $LOGFILE $PIDFILE; do
        [[ ! -f $f ]] && continue
        uu=$(stat -c %U $f)
        if [[ ${uu} != ${ur} ]]; then
            log_mesg "$dt $$ DAEMON ? $0: chown ${ugr} $f" && chown ${ugr} $f
            [[ -n "$HOSTNAME_DEV" && $HOSTNAME =~ $HOSTNAME_DEV ]] && chmod 0664 $f || chmod 0644 $f
        fi
    done
}


restore_module() {
    local c d old oldp pid

    oldp="$1"
    old="$2"
    if [[ -d $oldp/_module_replaced && -d $oldp/_module_replaced/$old ]]; then
        pid=$$
        d=$(date +"%Y-%prm-%d %H:%M:%S,000")
        if [[ -L $oldp/$old || ! -d $oldp/$old ]]; then
            log_mesg "$d $pid DAEMON $opt_db $(basename $0): Original module $old restored"
            rm -f $oldp/$old
            mv $oldp/_module_replaced/$old $oldp/$old
            c=0 && for x in $oldp/_module_replaced/*; do ((c++)); done
            [[ $c -eq 0 ]] && rm -fR $oldp/_module_replaced/
        else
            log_mesg "$d $pid DAEMON $opt_db $(basename $0): Module $oldp/_module_replaced/$old should be restored"
        fi
    fi
}


replace_module() {
    local a b d new newp old oldp pid spec

    oldp="$1"
    old="$2"
    newp="$3"
    new="$4"
    spec="$5"
    pid=$$
    d=$(date +"%Y-%prm-%d %H:%M:%S,000")
    if [[ -L $oldp/$old && -d $oldp/_module_replaced && -d $oldp/_module_replaced/$old ]]; then
        log_mesg "$d $pid DAEMON $opt_db $(basename $0): Module $old replaced by $new"
    elif [[ -n $spec ]]; then
        [[ ! -d $oldp/_module_replaced && $DRY_RUN -eq 0 ]] && mkdir $oldp/_module_replaced
        [[ ! -d $oldp/_module_replaced/$old ]] && log_mesg "$d $pid DAEMON $opt_db $(basename $0): Warning: $old replaced by $newp/$new" && [[ $DRY_RUN -eq 0 ]] && mv $oldp/$old $oldp/_module_replaced/$old
        if [[ $DRY_RUN -eq 0 ]]; then
            [[ ! -d $oldp/$old ]] && ln -s $newp/$new $oldp/$old
            [[ ! -d $oldp/$old/addons ]] && ln -s $oldp/_module_replaced/$old/addons $oldp/$old/addons
        fi
    else
        [[ -f $oldp/$old/__openerp__.py ]] && a=$(grep -E "^ *[\"\']auto_install[\"\'] *: *[a-zA-Z]+" $oldp/$old/__openerp__.py | awk -F: '{gsub(/[ ,]*/,"",$2); print $2}')
        [[ -f $oldp/$old/__manifest__.py ]] && a=$(grep -E "^ *[\"\']auto_install[\"\'] *: *[a-zA-Z]+" $oldp/$old/__manifest__.py | awk -F: '{gsub(/[ ,]*/,"",$2); print $2}')
        [[ -f $oldp/$old/__openerp__.py ]] && b=$(grep -E "^ *[\"\']bootstrap[\"\'] *: *[a-zA-Z]+" $oldp/$old/__openerp__.py | awk -F: '{gsub(/[ ,]*/,"",$2); print $2}')
        [[ -f $oldp/$old/__manifest__.py ]] && b=$(grep -E "^ *[\"\']bootstrap[\"\'] *: *[a-zA-Z]+" $oldp/$old/__manifest__.py | awk -F: '{gsub(/[ ,]*/,"",$2); print $2}')
        [[ ! -d $oldp/_module_replaced ]] && mkdir $oldp/_module_replaced
        [[ ! -d $oldp/_module_replaced/$old ]] && log_mesg "$d $pid DAEMON $opt_db $(basename $0): Module $old replaced by $newp/$new" && [[ $DRY_RUN -eq 0 ]] && mv $oldp/$old $oldp/_module_replaced/$old
        if [[ $DRY_RUN -eq 0 ]]; then
            [[ ! -d $oldp/$old ]] && ln -s $newp/$new $oldp/$old
            [[ -n $a && -f $newp/$new/__openerp__.py ]] && sed -E "s|(.auto_install. *: *)[a-zA-Z]+|\1 $a|" -i $newp/$new/__openerp__.py
            [[ -n $a && -f $newp/$new/__manifest__.py ]] && sed -E "s|(.auto_install. *: *)[a-zA-Z]+|\1 $a|" -i $newp/$new/__manifest__.py
            [[ -n $b && -f $newp/$new/__openerp__.py ]] && sed -E "s|(.bootstrap. *: *)[a-zA-Z]+|\1 $a|" -i $newp/$new/__openerp__.py
            [[ -n $b && -f $newp/$new/__manifest__.py ]] && sed -E "s|(.bootstrap. *: *)[a-zA-Z]+|\1 $a|" -i $newp/$new/__manifest__.py
        fi
    fi
}


# shellcheck disable=SC2120
replace_restore_modules() {
# replace_restore_modules(z0_repl)
# Replace module by another from configuration file or restore original prm
# server_wide_module_replacement = old_module:new_module,old_path:new_path
    local c d new newp old oldp opaths oroot pid param prm x z
    [[ -n $1 ]] && z=$1 || z=0
    pid=$$
    if [[ -f $CONFIGFILE ]]; then
        opaths="$(grep -E ^addons_path $CONFIGFILE | awk -F= '{gsub(/^ */,"",$2); print $2}')"
        param=$(grep -E ^server_wide_module_replacement $CONFIGFILE | awk -F= '{gsub(/^ */,"",$2); print $2}')
        for prm in ${param//,/ }; do
            oroot=""
            oldp=""
            newp=""
            c=""
            old=$(echo $prm | awk -F: '{gsub(/^ */,"",$1); print $1}')
            new=$(echo $prm | awk -F: '{gsub(/^ */,"",$2); print $2}')
            d=$(date +"%Y-%prm-%d %H:%M:%S,000")
            [[ $old =~ "/" ]] && log_mesg "$d $pid DAEMON $opt_db $(basename $0): Invalid parameter: server_wide_module_replacement = $old!" && continue
            for d in ${opaths//,/ }; do
                [[ -n $oroot && ( -n $newp || $z -ne 0 ) ]] && break
                n=$(dirname $d)
                [[ -z $oldp && $d =~ /$old/addons$ && $old =~ ^(odoo|openerp)$ ]] && oroot=$(dirname $n) && c=$old
                [[ -z $newp && -d $d/$new && ! -d $d/$new/addons ]] && newp=$d/$(dirname $new) && new=$(basename $new)
            done
            [[ -n $oroot && -d $oroot/_module_replaced/$c && -z $newp ]] && z=1
            if [[ -n $oroot && ( -n $newp || $z -ne 0 ) ]]; then
              if [[ $z -eq 0 ]]; then
                  replace_module "$oroot" "$c" "$newp" "$new" "$c"
              else
                  restore_module "$oroot" "$c"
              fi
              continue
            fi
            for d in ${opaths//,/ }; do
                [[ -n $oldp && -n $newp ]] && break
                n=$(dirname $d)
                [[ -z $oldp && -d $d/$old && ( -f $d/$old/__manifest__.py || -f $d/$old/__openerp__.py ) ]] && oldp=$d
                [[ -z $newp && -d $d/$new && ( -f $d/$new/__manifest__.py || -f $d/$new/__openerp__.py ) ]] && newp=$d
                [[ -z $newp && -d $n/$new && ( -f $n/$new/__manifest__.py || -f $n/$new/__openerp__.py ) ]] && newp=$n/$(dirname $new) && new=$(basename $new)
            done
            [[ -z $oldp || -z $newp ]] && log_mesg "$d $pid DAEMON $opt_db $(basename $0): Module replacement $new ($newp) not found for $old ($oldp)!" && continue
            if [[ $z -eq 0 ]]; then
                replace_module "$oldp" "$old" "$newp" "$new"
            else
                restore_module "$oldp" "$old"
            fi
        done
        for d in ${opaths//,/ }; do
            n=$(dirname $d)
            if [[ $d =~ /(odoo|openerp)/addons$ ]]; then
                oroot=$(dirname $n)
                c=$(basename $n)
                [[ -d $oroot/_module_replaced && -d $oroot/_module_replaced/$c ]] && restore_module "$oroot" $c
            fi
            if [[ -d $d/_module_replaced ]]; then
                for old in $d/_module_replaced/*; do
                    [[ -n $param ]] && z=1 || z=0
                    for prm in ${param//,/ }; do
                        x=$(echo $prm | awk -F: '{gsub(/^ */,"",$1); print $1}')
                        [[ $old == "x" ]] && z=0 && break
                    done
                    [[ $z -ne 0 ]] && continue
                    restore_module "$d" $(basename $old)
                done
            fi
        done
    fi
}


start_RHEL () {
    if [[ -d /etc/${xtl_id}/start.d ]] ; then
        if [[ $DRY_RUN -gt 0 ]]; then
          echo "> run-parts --exit-on-error /etc/${xtl_id}/start.d"
          run-parts --exit-on-error /etc/${xtl_id}/start.d
        elif [[ $DRY_RUN -gt 0 ]]; then
          echo "> run-parts --exit-on-error /etc/${xtl_id}/start.d"
        else
          run-parts --exit-on-error /etc/${xtl_id}/start.d
        fi
        RETVAL=$?
        echo
        [[ $RETVAL -ne 0 ]] && return $RETVAL
    fi

    if [[ $DRY_RUN -gt 0 ]]; then
      echo "> daemon --user ${USER_RUN} --check ${NAME} \"/usr/bin/setsid ${DAEMON} ${DAEMON_OPTS} &\""
      daemon --user ${USER_RUN} --check ${NAME} "/usr/bin/setsid ${DAEMON} ${DAEMON_OPTS} &"
    elif [[ $DRY_RUN -gt 0 ]]; then
      echo "> daemon --user ${USER_RUN} --check ${NAME} \"/usr/bin/setsid ${DAEMON} ${DAEMON_OPTS} &\""
    else
      daemon --user ${USER_RUN} --check ${NAME} "/usr/bin/setsid ${DAEMON} ${DAEMON_OPTS} &"
    fi
    RETVAL=$?
    echo
    [[ $DRY_RUN -eq 0 && $RETVAL -eq 0 ]] && touch $LOCKFILE
    return $RETVAL
}


start_Debian () {
    if [[ -z "$USE_SUDO" || $USE_SUDO -eq 0 ]]; then
      if [[ $DRY_RUN -gt 0 ]]; then
        echo "> start-stop-daemon --start --quiet --pidfile ${PIDFILE} --chuid ${USER_RUN} --background --make-pidfile --exec ${DAEMON} -- ${DAEMON_OPTS}"
        start-stop-daemon --start --quiet --pidfile ${PIDFILE} --chuid ${USER_RUN} --background --make-pidfile --exec ${DAEMON} -- ${DAEMON_OPTS}
      elif [[ $DRY_RUN -gt 0 ]]; then
        echo "> start-stop-daemon --start --quiet --pidfile ${PIDFILE} --chuid ${USER_RUN} --background --make-pidfile --exec ${DAEMON} -- ${DAEMON_OPTS}"
      else
        start-stop-daemon --start --quiet --pidfile ${PIDFILE} --chuid ${USER_RUN} --background --make-pidfile --exec ${DAEMON} -- ${DAEMON_OPTS}
      fi
      RETVAL=$?
    else
      if [[ $DRY_RUN -gt 0 ]]; then
        echo "> sudo -u ${USER_RUN} -bn ${DAEMON} ${DAEMON_OPTS}"
        ${DAEMON} ${DAEMON_OPTS}
      elif [[ $DRY_RUN -gt 0 ]]; then
        echo "> sudo -u ${USER_RUN} -bn ${DAEMON} ${DAEMON_OPTS}"
      else
        sudo -u ${USER_RUN} -bn ${DAEMON} ${DAEMON_OPTS}
      fi
      RETVAL=$?
    fi
    return $RETVAL
}


start() {
    echo "Starting ${DESC}"
    check_privsep_dir
    check_4_venv
    [[ ${xtl_version} -ge 10 ]] && check_lessc
    set_queue
    replace_restore_modules
    local dt=$(date +"%Y-%m-%d %H:%M:%S,000")
    [[ -n $ODOO_CONNECTOR_CHANNELS ]] && log_mesg "$dt $$ DAEMON ? $0: ODOO_CONNECTOR_CHANNELS=\"$ODOO_CONNECTOR_CHANNELS\""
    log_mesg "$dt $$ DAEMON ? $0: ${DAEMON} ${DAEMON_OPTS}"
    if [ "$FH" == "RHEL" ]; then
        start_RHEL
    elif [ "$FH" == "Debian" ]; then
        start_Debian
    else
        echo "Unrecognized Linux distribution"
        exit 1
    fi
    RETVAL=$?
    [[ $RETVAL -ne 0 ]] && log_mesg "$dt $$ DAEMON-ERROR ? $0: Start daemon return code = $RETVAL!"
    if [[ $DRY_RUN -eq 0 ]]; then
        local ctr=5 pid="1" x
        while ((ctr--)); do
          [[ ! -f $PIDFILE ]] && log_mesg "PID file $PIDFILE not found!" || pid=$(cat $PIDFILE)
          x=$(ps -ef|grep -E " $pid +[0-9]+ .*odoo-bin")
          [[ -z $x ]] && log_mesg "Process $pid not found!" || log_mesg "$x"
          sleep 1
        done
    fi
    return $RETVAL
}

stop_by_ps() {
    local pid ctr dt x
    dt=$(date +"%Y-%m-%d %H:%M:%S,000")
    x="Stop daemon error! Searching for process to kill ..."
    # echo $x
    log_mesg "$dt $$ DAEMON-ERROR ? $0: $x"
    [[ ${xtl_version} -lt 11 ]] && py=python || py=python3
    ctr=3
    pid=$(ps -ef | grep "$py .*$DAEMON.*$CONFIGFILE" | grep -v grep | awk '{print $2}' | head -n1)
    while [[ -n "$pid" ]]; do
        kill $pid
        x="Killed process $pid!"
        # echo $x
        log_mesg "$dt $$ DAEMON-ERROR ? $0: $x"
        sleep 1
        ((ctr--))
        [[ $ctr -eq 0 ]] && break
        pid=$(ps -ef | grep "$py .*$DAEMON.*conf" | grep -v grep | awk '{print $2}' | head -n1)
    done
    test -z "$pid"
    return $?
}

stop_RHEL() {
    if [[ -f $PIDFILE ]]; then
        if [[ $DRY_RUN -gt 0 ]]; then
            echo "kill -TERM \$(cat $PIDFILE) > /dev/null 2>&1"
        else
            kill -TERM $(cat $PIDFILE) > /dev/null 2>&1
        fi
    fi
    RETVAL=$?
    [[ $RETVAL -ne 0 ]] && stop_by_ps
    RETVAL=$?
    if [[ $RETVAL -eq 0 ]]; then
        [[ $DRY_RUN -eq 0 ]] && rm -f $LOCKFILE
        # echo_success
        echo
    else
        # echo_failure
        echo
    fi
    if [[ -d /etc/${xtl_id}/stop.d ]]; then
        echo -n "Clearing $DESC: "
        run-parts /etc/${xtl_id}/stop.d
        echo
    fi
    return $RETVAL
}


stop_Debian () {
    if [[ $DRY_RUN -gt 0 ]]; then
        echo "> start-stop-daemon --stop --quiet --pidfile ${PIDFILE} --oknodo --remove-pidfile"
    else
        start-stop-daemon --stop --quiet --pidfile ${PIDFILE}  --oknodo --remove-pidfile
    fi
    RETVAL=$?
    [[ $RETVAL -ne 0 ]] && stop_by_ps
    RETVAL=$?
    return $RETVAL
}


stop() {
    echo "Stopping ${DESC}"
    if [[ -f $PIDFILE ]]; then
        chown root:root $PIDFILE
        if [ "$FH" == "RHEL" ]; then
            stop_RHEL
        elif [ "$FH" == "Debian" ]; then
            stop_Debian
        else
            echo "Unrecognized Linux distribution"
            exit 1
        fi
    else
        stop_by_ps
    fi
    RETVAL=$?
    local dt=$(date +"%Y-%m-%d %H:%M:%S,000")
    log_mesg "$dt $$ DAEMON ? $0: stop process $PIDFILE"
    set_publicsep_dir
    return $RETVAL
}


restart() {
    echo "Restarting ${DESC}: "
    stop
    sleep 3
    start
    RETVAL=$?
}


status() {
    RETVAL=1
    if [[ -s $PIDFILE ]] ; then
        checkpid $(cat $PIDFILE)
        RETVAL=$?
    fi
    if [[ $RETVAL -ne 0 ]] ; then
        [[ ${xtl_version} -lt 11 ]] && py=python || py=python3
        checkpid $(ps -ef | grep "$py .*$DAEMON.*conf" | grep -v grep | awk '{print $2}' | head -n1)
        RETVAL=$?
    fi
    if [[ $RETVAL -eq 0 ]] ; then
        echo "$NAME is running..."
    else
        echo "$NAME is stopped"
    fi
    return $RETVAL
}


case "${1}" in
    start)
        start
        ;;

    stop)
        stop
        ;;

    restart|reload|force-reload)
        restart
        ;;

    status)
        status
        ;;

    probe)
        exit 0
        ;;

    *)
        if [ "$FH" == "RHEL" ]; then
          echo "Usage: ${NAME} {start|stop|status|restart}"
        elif [ "$FH" == "Debian" ]; then
           echo "Usage: ${NAME} {start|stop|status|restart}" >&2
        else
          echo "Unrecognized Linux distribution"
        fi
        exit 1
        ;;
esac

exit 0
